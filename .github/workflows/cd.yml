name: CD

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🚚 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---- Meta (version/env/sha) ----
      - name: 🔎 Derive version + env + short sha
        id: meta
        shell: bash
        run: |
          echo "GIT_SHA_SHORT=${GITHUB_SHA::8}" >> "$GITHUB_ENV"

          APP_VERSION=$(grep -E '^APP_VERSION=' .env.example | cut -d= -f2- | tr -d '"' || true)
          APP_ENV=$(grep -E '^APP_ENV=' .env.example | cut -d= -f2- | tr -d '"' || true)

          : "${APP_VERSION:=0.0.0}"
          : "${APP_ENV:=production}"

          echo "APP_VERSION=${APP_VERSION}" >> "$GITHUB_ENV"
          echo "APP_ENV=${APP_ENV}" >> "$GITHUB_ENV"

      # ---- Create version.json (valid JSON!) ----
      - name: 🧾 Write version.json
        shell: bash
        run: |
          mkdir -p public/build
          cat > public/build/version.json <<JSON
          {
            "version": "${APP_VERSION}",
            "sha": "${GIT_SHA_SHORT}",
            "env": "${APP_ENV}",
            "built_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          JSON
          echo "Wrote public/build/version.json:"
          cat public/build/version.json

      # ---- Frontend build ----
      - name: 🟢 Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install & build assets
        run: |
          npm ci
          npm run build

            # (Optional) If you reference libs directly from /public/vendor, expose them:
      - name: 📁 Expose 3rd-party browser files to /public/vendor (optional)
        shell: bash
        run: |
          set -e
          mkdir -p public/vendor/filepond/plugins public/vendor/filepond/styles public/vendor/cropper
          if [ -d node_modules/filepond ]; then
            cp node_modules/filepond/dist/filepond.min.js  public/vendor/filepond/filepond.min.js
            cp node_modules/filepond/dist/filepond.min.css public/vendor/filepond/styles/filepond.css
          fi
          if [ -d node_modules/filepond-plugin-image-preview ]; then
            cp node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js  public/vendor/filepond/plugins/filepond-plugin-image-preview.js
            cp node_modules/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css public/vendor/filepond/styles/filepond-plugin-image-preview.css
          fi
          for P in filepond-plugin-file-encode filepond-plugin-file-validate-type filepond-plugin-file-validate-size filepond-plugin-image-exif-orientation filepond-plugin-image-crop filepond-plugin-image-resize filepond-plugin-image-transform; do
            if [ -d "node_modules/$P" ]; then
              JS=$(ls node_modules/$P/dist/*.js 2>/dev/null | head -n1 || true)
              [ -n "$JS" ] && cp "$JS" "public/vendor/filepond/plugins/$(basename "$JS")"
            fi
          done
          if [ -d node_modules/cropperjs ]; then
            cp node_modules/cropperjs/dist/cropper.min.js  public/vendor/cropper/cropper.min.js
            cp node_modules/cropperjs/dist/cropper.min.css public/vendor/cropper/cropper.min.css
          fi

      # ---- FTP Deploy ----
      - name: 🚀 FTP Deploy
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server:   ${{ secrets.PROD_FTP_SERVER }}
          username: ${{ secrets.PROD_FTP_USERNAME }}
          password: ${{ secrets.PROD_FTP_PASSWORD }}

      # ---- SSH post-deploy steps on server ----
      - name: 🔑 SSH and run commands
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_SSH_HOST }}
          username: ${{ secrets.DEV_SSH_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: 22
          script: |
            set -e
            cd www/klio.lchsd.ch

            /usr/local/php84/bin/composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader

            /usr/local/php84/bin/php artisan migrate --force

            # clear + warm caches safely after migrations
            /usr/local/php84/bin/php artisan config:clear
            /usr/local/php84/bin/php artisan route:clear
            /usr/local/php84/bin/php artisan view:clear
            /usr/local/php84/bin/php artisan cache:clear

            # If you depend on Bladewind public files, ensure they exist
            mkdir -p public/vendor/bladewind/js public/vendor/bladewind/css || true
            [ -f vendor/mkocansey/bladewind/public/js/helpers.js ] && cp -f vendor/mkocansey/bladewind/public/js/helpers.js public/vendor/bladewind/js/ || true
            [ -f vendor/mkocansey/bladewind/public/css/bladewind-ui.min.css ] && cp -f vendor/mkocansey/bladewind/public/css/bladewind-ui.min.css public/vendor/bladewind/css/ || true
            [ -f vendor/mkocansey/bladewind/public/css/animate.min.css ] && cp -f vendor/mkocansey/bladewind/public/css/animate.min.css public/vendor/bladewind/css/ || true

            find public/vendor/bladewind -type d -exec chmod 755 {} \; || true
            find public/vendor/bladewind -type f -exec chmod 644 {} \; || true
